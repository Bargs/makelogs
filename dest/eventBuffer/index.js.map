{"version":3,"sources":["../../src/eventBuffer/index.js"],"names":["eventBuffer","argv","require","Bluebird","omitFields","bulkQueue","push","event","final","body","Array","prototype","call","length","flush","undefined","pending","delay","then","log","splice","err","console","error","resp","stack","process","exit","resolve","module","exports"],"mappings":";;AAAA,IAAMA,cAAc,EAApB;AACA,IAAMC,OAAOC,QAAQ,SAAR,CAAb;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,aAAaF,QAAQ,gBAAR,CAAnB;AACA,IAAMG,YAAYH,QAAQ,cAAR,EAAwBF,WAAxB,CAAlB;;AAEAA,YAAYM,IAAZ,GAAmB,iBAAS;AAC1B;AACA,MAAIC,UAAU,KAAd,EAAqB;AACnBP,gBAAYQ,KAAZ,GAAoB,IAApB;AACD,GAFD,MAEO;AACLJ,eAAWG,MAAME,IAAjB;AACAC,UAAMC,SAAN,CAAgBL,IAAhB,CAAqBM,IAArB,CAA0BZ,WAA1B,EAAuCO,KAAvC;AACD;;AAED,MAAIP,YAAYa,MAAZ,KAAuB,IAAvB,IAA+Bb,YAAYQ,KAA/C,EAAsD;AACpD,WAAOR,YAAYc,KAAZ,EAAP;AACD;;AAED,SAAOC,SAAP;AACD,CAdD;;AAgBA;AACA;AACA,IAAIC,gBAAJ;AACAhB,YAAYc,KAAZ,GAAoB,YAAM;AACxB,MAAIE,OAAJ,EAAa,OAAOA,OAAP;;AAEbA,YAAUb,SAASc,KAAT,CAAe,CAAf,EACTC,IADS,CACJ,YAAM;AACVF,cAAU,IAAV;;AAEA,WAAO,IAAIb,QAAJ,CAAa,mBAAW;AAC7BF,WAAKkB,GAAL,CAAS,SAAT,EAAoBnB,YAAYa,MAAhC,EAAwC,2BAAxC;AACAR,gBAAUC,IAAV,CAAe,CAAEN,YAAYoB,MAAZ,CAAmB,CAAnB,CAAF,CAAf,EAA0C,eAAO;AAC/C,YAAIC,GAAJ,EAAS;AACPC,kBAAQC,KAAR,CAAcF,IAAIG,IAAlB;AACAF,kBAAQC,KAAR,CAAcF,IAAII,KAAlB;AACAC,kBAAQC,IAAR;AACD,SAJD,MAIO;AACLC;AACD;AACF,OARD;AASD,KAXM,CAAP;AAYD,GAhBS,CAAV;;AAkBA,SAAOZ,OAAP;AACD,CAtBD;;AAwBAa,OAAOC,OAAP,GAAiB9B,WAAjB","file":"index.js","sourcesContent":["const eventBuffer = []\nconst argv = require('../argv')\nconst Bluebird = require('bluebird')\nconst omitFields = require('../_omitFields')\nconst bulkQueue = require('./_bulkQueue')(eventBuffer)\n\neventBuffer.push = event => {\n  // pushing false is the sign that we are done pushing\n  if (event === false) {\n    eventBuffer.final = true\n  } else {\n    omitFields(event.body)\n    Array.prototype.push.call(eventBuffer, event)\n  }\n\n  if (eventBuffer.length === 3000 || eventBuffer.final) {\n    return eventBuffer.flush()\n  }\n\n  return undefined\n}\n\n// debounced a tiny bit so that all failed events in a\n// bulk response will be retried together\nlet pending\neventBuffer.flush = () => {\n  if (pending) return pending\n\n  pending = Bluebird.delay(1)\n  .then(() => {\n    pending = null\n\n    return new Bluebird(resolve => {\n      argv.log('pushing', eventBuffer.length, 'events into the bulkQueue')\n      bulkQueue.push([ eventBuffer.splice(0) ], err => {\n        if (err) {\n          console.error(err.resp)\n          console.error(err.stack)\n          process.exit()\n        } else {\n          resolve()\n        }\n      })\n    })\n  })\n\n  return pending\n}\n\nmodule.exports = eventBuffer\n"]}