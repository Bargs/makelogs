{"version":3,"sources":["../../src/samples/weighted_list.js"],"names":["module","exports","valuesToWeights","_list","Object","keys","forEach","push","value","weight","_sum","_totals","length","_randomIndex","maximumIndex","middleIndex","minimumIndex","sum","total","totals","_update","random","Math","floor","item"],"mappings":";;;;;;AAAA;;;;;AAKAA,OAAOC,OAAP;AACE,0BAAkC;AAAA;;AAAA,QAAtBC,eAAsB,uEAAJ,EAAI;;AAAA;;AAChC,SAAKC,KAAL,GAAa,EAAb;;AAEAC,WAAOC,IAAP,CAAYH,eAAZ,EAA6BI,OAA7B,CAAqC,iBAAS;AAC5C,YAAKC,IAAL,CAAUL,gBAAgBM,KAAhB,CAAV,EAAkCA,KAAlC;AACD,KAFD;AAGD;;AAED;;;;;;;;;AATF;AAAA;AAAA,2BAgB0B;AAAA,UAAnBC,MAAmB,uEAAV,CAAU;AAAA,UAAPD,KAAO;;AACtB,WAAKL,KAAL,CAAWI,IAAX,CAAgB;AACdC,oBADc;AAEdC;AAFc,OAAhB;;AAKA,aAAO,KAAKC,IAAZ;AACA,aAAO,KAAKC,OAAZ;;AAEA,aAAO,KAAKC,MAAL,GAAc,CAArB;AACD;AA1BH;AAAA;AAAA,0BA4BQ;AACJ,aAAO,KAAKT,KAAL,CAAW,KAAKU,YAAL,EAAX,EAAgCL,KAAvC;AACD;;AAED;;;;;;;AAhCF;AAAA;AAAA,mCAsCiB;AACb,UAAIM,qBAAJ;AACA,UAAIC,oBAAJ;AACA,UAAIC,eAAe,CAAnB;AACA,UAAIC,MAAM,KAAKP,IAAf;AACA,UAAIQ,cAAJ;AACA,UAAIC,SAAS,KAAKR,OAAlB;;AAEA,UAAI,CAACM,GAAD,IAAQ,CAACE,MAAb,EAAqB;AACnB,aAAKC,OAAL;;AAEAH,cAAM,KAAKP,IAAX;AACAS,iBAAS,KAAKR,OAAd;;AAEA,YAAI,CAACM,GAAD,IAAQ,CAACE,MAAT,IAAmB,CAACA,OAAOP,MAA/B,EAAuC;AACrC,iBAAO,IAAP;AACD;AACF;;AAEDE,qBAAeK,OAAOP,MAAP,GAAgB,CAA/B;AACA,UAAMS,SAASC,KAAKD,MAAL,KAAgBJ,GAA/B;;AAEA,aAAOH,gBAAgBE,YAAvB,EAAqC;AACnCD,sBAAc,CAACD,eAAeE,YAAhB,IAAgC,CAA9C;;AAEA,YAAID,cAAc,CAAlB,EAAqB;AACnBA,wBAAc,CAAd;AACD,SAFD,MAEO;AACLA,wBAAcO,KAAKC,KAAL,CAAWR,WAAX,CAAd;AACD;;AAEDG,gBAAQC,OAAOJ,WAAP,CAAR;;AAEA,YAAIM,WAAWH,KAAf,EAAsB;AACpBH,yBAAe,CAAf;AACA;AACD,SAHD,MAGO,IAAIM,SAASH,KAAb,EAAoB;AACzB,cAAIH,eAAeM,SAASF,OAAOJ,cAAc,CAArB,CAA5B,EAAqD;AACnD;AACD;;AAEDD,yBAAeC,cAAc,CAA7B;AACD,SANM,MAMA,IAAIM,SAASH,KAAb,EAAoB;AACzBF,yBAAeD,cAAc,CAA7B;AACD;AACF;;AAED,aAAOA,WAAP;AACD;;AAED;;;;;;;AAxFF;AAAA;AAAA,8BA8FY;AACR,UAAIE,MAAM,CAAV;AACA,UAAME,SAAS,EAAf;;AAEA,WAAKhB,KAAL,CAAWG,OAAX,CAAmB,gBAAQ;AACzBW,eAAOO,KAAKf,MAAZ;AACAU,eAAOZ,IAAP,CAAYU,GAAZ;AACD,OAHD;;AAKA,WAAKP,IAAL,GAAYO,GAAZ;AACA,WAAKN,OAAL,GAAeQ,MAAf;;AAEA,aAAO,IAAP;AACD;AA3GH;;AAAA;AAAA","file":"weighted_list.js","sourcesContent":["/**\n * @class WeightedList\n * @constructor\n */\n\nmodule.exports = class WeightedList {\n  constructor(valuesToWeights = {}) {\n    this._list = []\n\n    Object.keys(valuesToWeights).forEach(value => {\n      this.push(valuesToWeights[value], value)\n    })\n  }\n\n  /**\n   * Add a value to the weighted list.\n   * @method add\n   * @param {Any} value\n   * @param {Number} [weight] Optional.  Defaults to 1.\n   * @return {Number} The index of the item that was added.\n   */\n  push(weight = 1, value) {\n    this._list.push({\n      value,\n      weight,\n    })\n\n    delete this._sum\n    delete this._totals\n\n    return this.length - 1\n  }\n\n  get() {\n    return this._list[this._randomIndex()].value\n  }\n\n  /**\n   * Returns an index by weighted random distribution.\n   * @method _randomIndex\n   * @protected\n   * @return {Number}\n   */\n  _randomIndex() {\n    let maximumIndex\n    let middleIndex\n    let minimumIndex = 0\n    let sum = this._sum\n    let total\n    let totals = this._totals\n\n    if (!sum || !totals) {\n      this._update()\n\n      sum = this._sum\n      totals = this._totals\n\n      if (!sum || !totals || !totals.length) {\n        return null\n      }\n    }\n\n    maximumIndex = totals.length - 1\n    const random = Math.random() * sum\n\n    while (maximumIndex >= minimumIndex) {\n      middleIndex = (maximumIndex + minimumIndex) / 2\n\n      if (middleIndex < 0) {\n        middleIndex = 0\n      } else {\n        middleIndex = Math.floor(middleIndex)\n      }\n\n      total = totals[middleIndex]\n\n      if (random === total) {\n        middleIndex += 1\n        break\n      } else if (random < total) {\n        if (middleIndex && random > totals[middleIndex - 1]) {\n          break\n        }\n\n        maximumIndex = middleIndex - 1\n      } else if (random > total) {\n        minimumIndex = middleIndex + 1\n      }\n    }\n\n    return middleIndex\n  }\n\n  /**\n   * Updates chached data for achieving weighted random distribution.\n   * @method _update\n   * @chainable\n   * @protected\n   */\n  _update() {\n    let sum = 0\n    const totals = []\n\n    this._list.forEach(item => {\n      sum += item.weight\n      totals.push(sum)\n    })\n\n    this._sum = sum\n    this._totals = totals\n\n    return this\n  }\n}\n"]}