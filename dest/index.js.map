{"version":3,"sources":["../src/index.js"],"names":["success","host","hostname","port","auth","console","log","total","startingMoment","format","endingMoment","dry","i","crunch","event","indexPrefix","delay","push","header","_index","index","_type","types","body","resolve","then","undefined","runCli","start","end"],"mappings":";;;;;;;;+BAcO,aAAwB;AAC7B,QAAMA,UAAU,MAAM,8BAAiB;AACrCC,YAAM,eAAKC,QAD0B;AAErCC,YAAM,eAAKA,IAF0B;AAGrCC,YAAM,eAAKA;AAH0B,KAAjB,CAAtB;;AAMA,QAAI,CAACJ,OAAL,EAAc;;AAEdK,YAAQC,GAAR,CACE,YADF,EACgBC,KADhB,EACuB,aADvB,EAEEC,eAAeC,MAAf,EAFF,EAE2B,IAF3B,EAEiCC,aAAaD,MAAb,EAFjC;;AAKA,QAAI,CAAC,eAAKE,GAAV,EAAe;AACb,YAAM,4BAAN;AACD;;AAED,mBAAKL,GAAL,CAAS,UAAT,EAAqBC,KAArB,EAA4B,QAA5B;AACA,QAAIK,IAAIL,KAAR;;AAEA,UAAO,SAASM,MAAT,GAAkB;AACvB,qBAAKP,GAAL,CAAS,uBAAT,EAAkCM,CAAlC,EAAqC,QAArC;;AAEA,aAAOA,KAAK,CAAZ,EAAeA,KAAK,CAApB,EAAuB;AACrB,YAAME,QAAQ,2BAAYC,WAAZ,CAAd;;AAEA,YAAI,eAAKJ,GAAT,EAAc;AACZN,kBAAQC,GAAR,CAAY,MAAZ,EAAoBQ,KAApB;AACA;AACD;;AAED;AACA,YAAME,QAAQ,sBAAYC,IAAZ,CAAiB;AAC7BC,kBAAQ,EAAEC,QAAQL,MAAMM,KAAhB,EAAuBC,OAAO,kBAAQC,KAAR,EAA9B,EADqB;AAE7BC,gBAAMT;AAFuB,SAAjB,CAAd;;AAKA,YAAIE,KAAJ,EAAW;AACT,yBAAKV,GAAL,CAAS,8BAAT;AACA;AACA,iBAAO,mBAASkB,OAAT,CAAiBR,KAAjB,EAAwBS,IAAxB,CAA6BZ,MAA7B,CAAP;AACD;AACF;;AAED,aAAOa,SAAP;AACD,KAzBM,EAAP;;AA2BA,QAAI,CAAC,eAAKf,GAAV,EAAe;AACb,4BAAYM,IAAZ,CAAiB,KAAjB;AACD;AACF,G;;kBAnDqBU,M;;;;;AAdtB;;;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMpB,QAAQ,eAAKA,KAAnB;AACA,IAAMC,iBAAiB,eAAKoB,KAA5B;AACA,IAAMlB,eAAe,eAAKmB,GAA1B;AACA,IAAMd,cAAc,eAAKA,WAAzB","file":"index.js","sourcesContent":["import Bluebird from 'bluebird'\n\nimport { initializeClient } from './client'\nimport randomEvent from './_randomEvent'\nimport samples from './samples'\nimport eventBuffer from './eventBuffer'\nimport createIndex from './_createIndex'\nimport argv from './argv'\n\nconst total = argv.total\nconst startingMoment = argv.start\nconst endingMoment = argv.end\nconst indexPrefix = argv.indexPrefix\n\nexport async function runCli() {\n  const success = await initializeClient({\n    host: argv.hostname,\n    port: argv.port,\n    auth: argv.auth,\n  })\n\n  if (!success) return\n\n  console.log(\n    'Generating', total, 'events from',\n    startingMoment.format(), 'to', endingMoment.format()\n  )\n\n  if (!argv.dry) {\n    await createIndex()\n  }\n\n  argv.log('creating', total, 'events')\n  let i = total\n\n  await (function crunch() {\n    argv.log('creating no more than', i, 'events')\n\n    for (; i >= 0; i -= 1) {\n      const event = randomEvent(indexPrefix)\n\n      if (argv.dry) {\n        console.log('\\n\\n', event)\n        continue\n      }\n\n      // eventBuffer.push might return a promise,\n      const delay = eventBuffer.push({\n        header: { _index: event.index, _type: samples.types() },\n        body: event,\n      })\n\n      if (delay) {\n        argv.log('waiting for bulk to complete')\n        // stop the loop and restart once complete\n        return Bluebird.resolve(delay).then(crunch)\n      }\n    }\n\n    return undefined\n  }())\n\n  if (!argv.dry) {\n    eventBuffer.push(false)\n  }\n}\n"]}