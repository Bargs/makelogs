{"version":3,"sources":["../../src/argv/_progress.js"],"names":["ProgressBar","require","_","module","exports","start","fallbackUpdateTimeout","progressBar","argv","startedIndexing","Date","now","pausing","verbose","progress","bind","console","log","update","indexedCount","total","incomplete","width","destroy","terminate","clearTimeout","tick","setTimeout","doneIndexing","end","time","Math","round"],"mappings":";;AAAA,IAAMA,cAAcC,QAAQ,UAAR,CAApB;AACA,IAAMC,IAAID,QAAQ,QAAR,CAAV;;AAEAE,OAAOC,OAAP,GAAiB,gBAAQ;AACvB,MAAIC,cAAJ;AACA,MAAIC,8BAAJ;AACA,MAAIC,oBAAJ;;AAEAC,OAAKC,eAAL,GAAuB,YAAM;AAC3BJ,YAAQK,KAAKC,GAAL,EAAR;AACD,GAFD;;AAIAH,OAAKI,OAAL,GAAe,YAAM,CAEpB,CAFD;;AAIA,MAAIJ,KAAKK,OAAT,EAAkB;AAChBL,SAAKM,QAAL,GAAgBZ,EAAEa,IAAF,CAAOC,QAAQC,GAAf,EAAoBD,OAApB,EAA6B,sCAA7B,CAAhB;AACD,GAFD,MAEO;AACLR,SAAKM,QAAL,GAAgB,SAASI,MAAT,CAAgBC,YAAhB,EAA8B;AAC5C,UAAI,CAACZ,WAAL,EAAkB;AAChBA,sBAAc,IAAIP,WAAJ,CAAgB,iCAAhB,EAAmD;AAC/DoB,iBAAOZ,KAAKY,KADmD;AAE/DC,sBAAY,GAFmD;AAG/DC,iBAAO;AAHwD,SAAnD,CAAd;;AAMAf,oBAAYgB,OAAZ,GAAsB,YAAM;AAC1BhB,sBAAYiB,SAAZ;AACAlB,kCAAwBmB,aAAanB,qBAAb,CAAxB;AACD,SAHD;AAID;;AAEDC,kBAAYmB,IAAZ,CAAiBP,gBAAgB,CAAjC;AACAb,8BAAwBmB,aAAanB,qBAAb,CAAxB;AACAA,8BAAwBqB,WAAWT,MAAX,EAAmB,IAAnB,CAAxB;AACD,KAjBD;AAkBD;;AAEDV,OAAKoB,YAAL,GAAoB,YAAM;AACxB,QAAMC,MAAMnB,KAAKC,GAAL,EAAZ;AACA,QAAMmB,OAAOC,KAAKC,KAAL,CAAW,CAACH,MAAMxB,KAAP,IAAgB,IAA3B,CAAb;AACAW,YAAQC,GAAR,gBAAyBT,KAAKY,KAA9B,mBAAiDU,IAAjD;AACA,QAAIvB,WAAJ,EAAiBA,YAAYgB,OAAZ;AAClB,GALD;AAMD,CA1CD","file":"_progress.js","sourcesContent":["const ProgressBar = require('progress')\nconst _ = require('lodash')\n\nmodule.exports = argv => {\n  let start\n  let fallbackUpdateTimeout\n  let progressBar\n\n  argv.startedIndexing = () => {\n    start = Date.now()\n  }\n\n  argv.pausing = () => {\n\n  }\n\n  if (argv.verbose) {\n    argv.progress = _.bind(console.log, console, 'bulk request indexed %s documents \\n')\n  } else {\n    argv.progress = function update(indexedCount) {\n      if (!progressBar) {\n        progressBar = new ProgressBar('indexing [:bar] :percent :etas ', {\n          total: argv.total,\n          incomplete: ' ',\n          width: 80,\n        })\n\n        progressBar.destroy = () => {\n          progressBar.terminate()\n          fallbackUpdateTimeout = clearTimeout(fallbackUpdateTimeout)\n        }\n      }\n\n      progressBar.tick(indexedCount || 0)\n      fallbackUpdateTimeout = clearTimeout(fallbackUpdateTimeout)\n      fallbackUpdateTimeout = setTimeout(update, 1000)\n    }\n  }\n\n  argv.doneIndexing = () => {\n    const end = Date.now()\n    const time = Math.round((end - start) / 1000)\n    console.log(`\\ncreated ${argv.total} events in ${time} seconds.`)\n    if (progressBar) progressBar.destroy()\n  }\n}\n"]}