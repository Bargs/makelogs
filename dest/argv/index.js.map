{"version":3,"sources":["../../src/argv/index.js"],"names":["_","require","join","read","readFileSync","OMIT_HELP_PATH","__dirname","optimist","usage","options","count","alias","type","default","describe","days","required","host","hostname","port","auth","indexPrefix","shards","replicas","dry","help","reset","verbose","trace","omit","indexInterval","argv","showHelp","console","log","process","exit","split","parseInt","isNaN","Error","moments","start","end","total","bind","noop","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const _ = require('lodash')\nconst join = require('path').join\nconst read = require('fs').readFileSync\n\nconst OMIT_HELP_PATH = join(__dirname, 'omitFormatting.txt')\n\nconst optimist = require('optimist')\n  .usage('A utility to generate sample log data.\\n\\nUsage: $0 [options]')\n  .options({\n    count: {\n      alias: 'c',\n      type: 'number',\n      default: 14000,\n      describe: 'Total event that will be created, accepts expressions like \"1m\" for 1 million (b,m,t,h)',\n    },\n    days: {\n      alias: 'd',\n      type: 'number',\n      required: true,\n      describe: 'Mumber of days Â± today to generate data for. Use one number or two seperated by a slash' +\n        ', e.g. \"1/10\" to go back one day, and forward 10',\n      default: 1,\n    },\n    host: {\n      alias: 'h',\n      describe: 'DEPRECATED',\n    },\n    hostname: {\n      alias: 'H',\n      describe: 'The elasticsearch hostname',\n      default: 'localhost',\n    },\n    port: {\n      alias: 'p',\n      type: 'number',\n      describe: 'The elasticsearch port',\n      default: 9200,\n    },\n    auth: {\n      describe: 'user:password when you want to connect to a secured elasticsearch cluster over basic auth',\n      default: null,\n    },\n    indexPrefix: {\n      describe: 'Name of the prefix of the index',\n      default: 'logstash-',\n    },\n    shards: {\n      alias: 's',\n      describe: 'The number of primary shards',\n      default: 1,\n    },\n    replicas: {\n      alias: 'r',\n      describe: 'The number of replica shards',\n      default: 0,\n    },\n    dry: {\n      describe: 'Test/Parse your arguments, but don\\'t actually do anything',\n      default: false,\n    },\n    help: {\n      describe: 'This help message',\n      type: 'boolean',\n    },\n    reset: {\n      describe: 'Clear all {prefix}-* indices and the makelogs index template before genrating',\n      type: 'boolean',\n      default: null,\n    },\n    verbose: {\n      describe: 'Log more info to the console',\n      type: 'boolean',\n    },\n    trace: {\n      describe: 'Log every request to elastisearch, including request bodies. BE CAREFULL',\n      type: 'boolean',\n    },\n    omit: {\n      alias: 'o',\n      describe: 'Omit a field from every event. See \"formatting an omit path\"',\n      type: 'string',\n    },\n    indexInterval: {\n      alias: 'i',\n      describe: (\n        'The interval that indices should roll over, either \"daily\", ' +\n        '\"monthly\", \"yearly\", or a number of documents.'\n      ),\n      default: 100000,\n    },\n  })\n\nconst argv = optimist.argv\n\nif (argv.help) {\n  optimist.showHelp(console.log)\n  console.log(read(OMIT_HELP_PATH, 'utf8'))\n\n  process.exit()\n}\n\nif (argv.host) {\n  console.log('[DEPRECATED]: --host and -h flags are deprecated, use --hostname and --port instead')\n\n  ;[\n    argv.hostname = argv.hostname,\n    argv.port = argv.port,\n  ] = argv.host.split(':')\n}\n\nswitch (argv.indexInterval) {\n  case 'daily':\n  case 'weekly':\n  case 'monthly':\n  case 'yearly':\n    break\n  default:\n    argv.indexInterval = parseInt(argv.indexInterval, 10)\n    if (isNaN(argv.indexInterval)) {\n      throw new Error('invalid indexInterval')\n    }\n    break\n}\n\n// get the start and end moments\nconst moments = require('./_parseDays')(argv)\n\nargv.start = moments[0]\nargv.end = moments[1]\n\n// parsing allows short notation like \"10m\" or \"1b\"\nargv.total = require('./_parseCount')(argv)\n\n\n// since logging is based on the verbose command line flag??\nargv.log = argv.verbose ? _.bind(console.log, console) : _.noop\n\nrequire('./_progress')(argv)\n\nmodule.exports = argv\n"]}