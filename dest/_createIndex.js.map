{"version":3,"sources":["../src/_createIndex.js"],"names":["argv","require","omitFields","confirmReset","module","exports","createIndex","indexTemplate","indexPrefix","indexTemplateName","body","template","settings","index","number_of_shards","shards","number_of_replicas","replicas","analysis","analyzer","makelogs_url","type","tokenizer","max_token_length","mappings","_default_","dynamic_templates","string_fields","match_mapping_type","match","mapping","omit_norms","doc_values","fields","raw","properties","id","include_in_all","clientip","ip","memory","referer","geo","srcdest","dest","src","coordinates","meta","related","char","user","firstname","lastname","indices","existsTemplate","name","exists","then","clearExisting","console","log","deleteTemplate","ignore","delete","create","putTemplate","maybeReset","reset","undefined"],"mappings":"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","file":"_createIndex.js","sourcesContent":["import {\n  attempt,\n  props as asyncProps,\n  all as asyncAll,\n} from 'bluebird'\n\nimport { client } from './client'\n\nconst argv = require('./argv')\nconst omitFields = require('./_omitFields')\nconst confirmReset = require('./_confirmReset')\n\nmodule.exports = function createIndex() {\n  const indexTemplate = `${argv.indexPrefix}*`\n  const indexTemplateName = `makelogs_index_template__${argv.indexPrefix}`\n\n  const body = {\n    template: indexTemplate,\n    settings: {\n      index: {\n        number_of_shards: argv.shards,\n        number_of_replicas: argv.replicas,\n      },\n      analysis: {\n        analyzer: {\n          makelogs_url: {\n            type: 'standard',\n            tokenizer: 'uax_url_email',\n            max_token_length: 1000,\n          },\n        },\n      },\n    },\n    mappings: {\n      _default_: {\n        dynamic_templates: [\n          {\n            string_fields: {\n              match_mapping_type: 'text',\n              match: '*',\n\n              mapping: {\n                type: 'text',\n                index: 'analyzed',\n                omit_norms: true,\n                doc_values: false,\n\n                fields: {\n                  raw: {\n                    index: 'not_analyzed',\n                    type: 'keyword',\n                    doc_values: true,\n                  },\n                },\n              },\n            },\n          },\n        ],\n\n        // properties\n        properties: omitFields({\n          '@timestamp': {\n            type: 'date',\n          },\n          id: {\n            type: 'integer',\n            index: 'true',\n            include_in_all: false,\n          },\n          clientip: {\n            type: 'ip',\n          },\n          ip: {\n            type: 'ip',\n          },\n          memory: {\n            type: 'double',\n          },\n          referer: {\n            type: 'string',\n            index: 'not_analyzed',\n          },\n          geo: {\n            properties: {\n              srcdest: {\n                type: 'string',\n                index: 'not_analyzed',\n              },\n              dest: {\n                type: 'string',\n                index: 'not_analyzed',\n              },\n              src: {\n                type: 'string',\n                index: 'not_analyzed',\n              },\n              coordinates: {\n                type: 'geo_point',\n              },\n            },\n          },\n          meta: {\n            properties: {\n              related: {\n                type: 'string',\n              },\n              char: {\n                type: 'string',\n                index: 'not_analyzed',\n              },\n              user: {\n                properties: {\n                  firstname: {\n                    type: 'string',\n                  },\n                  lastname: {\n                    type: 'integer',\n                    index: 'true',\n                  },\n                },\n              },\n            },\n          },\n        }, true),\n      },\n    },\n  }\n\n  return attempt(() => asyncProps({\n    template: client.indices.existsTemplate({\n      name: indexTemplateName,\n    }),\n    indices: client.indices.exists({\n      index: indexTemplate,\n    }),\n  }))\n  .then(exists => {\n    function clearExisting() {\n      console.log('clearing existing \"%s\" index templates and indices', indexTemplate)\n      return asyncAll([\n        client.indices.deleteTemplate({\n          ignore: 404,\n          name: indexTemplateName,\n        }),\n        client.indices.delete({\n          ignore: 404,\n          index: indexTemplate,\n        }),\n      ])\n    }\n\n    function create() {\n      console.log('creating index template for \"%s\"', indexTemplate)\n      return client.indices.putTemplate({\n        name: indexTemplateName,\n        body,\n      })\n    }\n\n    function maybeReset(reset) {\n      switch (reset) {\n        case true:\n          return clearExisting().then(create)\n        case false:\n          if (!exists.indices) {\n            return create()\n          }\n          return undefined// do nothing, index template exists\n        default:\n          return confirmReset().then(maybeReset)\n      }\n    }\n\n    if (exists.template || exists.indices) {\n      return maybeReset(argv.reset)\n    }\n\n    return create()\n  })\n}\n"]}